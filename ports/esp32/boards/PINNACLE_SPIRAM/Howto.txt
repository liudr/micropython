How to set up a custom board:
Make a copy of the GENERIC_SPIRAM subfolder in ports/esp32/boards under a different name. You will update the following files in the copy:
board.json is just a list for the micropython.org list of firmware so its keywords aren't affecting the compilation.
mpconfigboard.cmake includes cmake options. boards/PINNACLE_SPIRAM/sdkconfig.board must have the correct board subfolder so all other settings are used.
mpconfigboard.h has some definitions including the name that appears when entering mp REPL
sdkconfig.board includes the compilation switches. For instance, including CONFIG_ETH_SPI_ETHERNET_W5500=y will cause the firmware to include Wiznet W5500 support.
Adding MICROPY_PY_NETWORK_HOSTNAME_MAX_LEN=30 will cause the dhcp host name size to increase from 15 to 29. The last byte is used for \0.

How to compile the firmware:
First, we need to export some path and constants:
cd Documents/Projects/esp/esp-idf/
source export.sh

Once you run the script, go to the work folder, which is the esp32 folder under port:
cd ~/Documents/Projects/liudr/micropython/ports/esp32/

You may have to manually erase the flash before uploading new firmware:
python3 -m esptool --baud 1500000 --chip esp32 --before default_reset --after hard_reset --port /dev/ttyUSB0 erase_flash

Clean an existing build:
make BOARD=PINNACLE_SPIRAM clean

Make and upload new firmware with PINNACLE_SPIRAM board setting. Another board setting is PINNACLE that has no SPIRAM.
make BOARD=PINNACLE_SPIRAM deploy

Serial port monitor:
picocom -b 115200 /dev/ttyUSB0

Notes and observations:

Partition table:
Default:
# Name	   Type	 SubType	 Offset	  Size	 Flags
nvs	      data	 nvs	     0x9000	  0x6000	
phy_init	 data	 phy	     0xf000	  0x1000	
factory	  app	  factory	 0x10000	 0x1F0000	
vfs	      data	 fat	     0x200000	 0x200000	

This is a 4MB partition that is the most common.
What is not displayed is the location of the partition table at 0x8000 (32KB) with the length of 3072 (0xC00) bytes and MD5 checksum to total a 4KB FLASH sector.
The first partition starting at 0x9000 (36KB) is an nvs (non-volatile storage) partition that is 24KB long, which is the default ESP-IDF setting. This area is used by ESP-IDF to store key-value pairs. I wonder if micropython provides functions to read and write this partition. It would be great if it does.
A phy_init partition stores some calibration data. Here is the info on it. Search phy_init, the last hit: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html
There is a factory app partition that starts at 0x10000 with the length of 1MB-64KB, the default starting location for ESP-IDF, where the first 64KB of flash is used as nvs and phy_init data
The last 2MB is used as a file partition with vfs.
MICROPY_PY_NETWORK_HOSTNAME_MAX_LEN is defined as 16 in modnetwork.h if it isn't defined with #ifndef. Then a global variable is defined:
extern char mod_network_hostname[MICROPY_PY_NETWORK_HOSTNAME_MAX_LEN];

In modnetwork.c there is a snippet that determines whether the input of host name is too long. Interesting call mp_raise_ValueError(NULL).
        if (len >= MICROPY_PY_NETWORK_HOSTNAME_MAX_LEN) {
            mp_raise_ValueError(NULL);
        }


